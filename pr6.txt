-- Functional languages practice 06

import Prelude hiding (flip, elem)
import Data.Char (toUpper)

-- repetition

-- Ex: change the first character to uppercase (use toUpper from Data.Char)

toUpperFirst :: String -> String
toUpperFirst = undefined

-- pattern matching

-- Ex: return True if the length of the list is 2 or 3. Don't use the
-- length function.

len2or3 :: [a] -> Bool
len2or3 = undefined

-- Ex: return the first element of the first list, the second element
-- of the second list and the third element of the third list

one23 :: ([a],[b],[c]) -> (a,b,c)
one23 = undefined

-- lambda expressions

add3 :: Int -> Int
add3 = \x -> x + 3

-- Ex: write it using lambdas

add :: Int -> Int -> Int
add = undefined

-- map

odds :: Int -> [Int]
odds n = map (\ x -> 2*x+1) [0..(n-1)]

-- Ex: change the first characters of all words to uppercase. Use
-- functions words, unwords.

toUpperFirsts :: String -> String
toUpperFirsts = undefined

-- Ex: powersOf2 n returns the first n powers of two.

powersOf2 :: Int -> [Int]
powersOf2 = undefined

-- Ex: count 'a' s returns the number of 'a' characters in the string
-- s. Use the library function sum.

count :: Eq a => a -> [a] -> Int
count = undefined

-- Ex: how many times the maximal element appears in a list? Use the
-- library function maximum

howManyMaxs :: Ord a => [a] -> Int
howManyMaxs = undefined

-- Ex: return a list of length 1000 with False and True alternating in it: [False, True, False, True, False, ...]

falseTrues :: [Bool]
falseTrues = undefined

-- Ex:

flip :: (a -> b -> c) -> b -> a -> c
flip = undefined

-- filter

-- all the off numbers from [1..100]

odds' :: [Int]
odds' = filter odd [1..100]

-- Ex: use filter

count' :: Eq a => a -> [a] -> Int
count' = undefined

-- Ex: get the vowels from a string

vowels :: String -> String
vowels = undefined

-- Ex: return the numbers from the input list which are divisible by 3
-- or 5

nums35 :: [Int] -> [Int]
nums35 = undefined

-- Ex: return True if the first input is in the second input

elem :: (Eq a) => a -> [a] -> Bool
elem = undefined
