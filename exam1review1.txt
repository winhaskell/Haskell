ghci              --进入Haskell解释器
ghci> :l test.hs  --载入test.hs文件
ghci> :r          --重新载入文件

sumsq n = 1^2 + 2^2 + 3^2 + . . . + n^2
sumsq define

Prelude> sumsq n = sum[n^2|n<-[1..n]]
Prelude> sumsq 2
5
Prelude> sumsq 3
14
Prelude> sumsq 10
385
Prelude> sumsq 1
1
Prelude> sumsq 4
30
Prelude>
----------------------------------------------------------------------------------
The function remdups removes adjacent duplicates from a list. For example,
remdups [1, 2, 2, 3, 3, 3, 1, 1] = [1, 2, 3, 1].

fnl :: (Eq a) => [a] -> a -> [a]
fnl [] x = [x]
fnl xs x | last xs == x = xs | otherwise = xs ++ [x]

remdups2 :: (Eq a) => [a] -> [a]
remdups2 [] = []
remdups2 ys = foldl fnl [] ys

Ok, modules loaded: Main.
*Main> remdups2 [1, 2, 2, 3, 3, 3, 1, 1]
[1,2,3,1]
*Main> remdups2 [1, 2, 2, 3, 3, 3, 1, 1,1,100,99,99,98]
[1,2,3,1,100,99,98]
*Main>
----------------------------------------------------------------------------------

判断是不是对称
isPalindrome :: Eq a => [a] -> Bool
isPalindrome define

isPalindrome :: Eq a => [a] -> Bool
isPalindrome [a] = True
isPalindrome (a:as) | a == (last as) = isPalindrome (init as)| otherwise = False

isPalindrome "121"
True
isPalindrome "asa"
True
isPalindrome "asas"
False

----------------------------------------------------------------------------------

Write a function fml list that returns a 3-tuple with the first, middle and last elements of a list.
> fml [1,2,3,4,5]
(1,3,5)
> fml [10]
(10,10,10)
> fml [1..101]
(1,51,101)
> fml "Haskell"
('H','k','l')

fml::[a] -> (a,a,a)
fml x = (head x, middle, last x) where middle = last (take ((length x `div` 2) + 1) x)


*Main> fml [1,2,3,4,5]
(1,3,5)
*Main> fml [1,2,3,4,5,99,9]
(1,4,9)
*Main> fml [1,2,3,4,5,99]
(1,4,99)
*Main> take 1 [12,3,3]
[12]
*Main> take 0 [12,3,3]
[]
*Main>

----------------------------------------------------------------------------------

ghci> 4 `elem` [3,4,5,6]   
True   
ghci> 10 `elem` [3,4,5,6]   
False 

ghci> [1..20] 
[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20] 
ghci> ['a'..'z'] 
"abcdefghijklmnopqrstuvwxyz" 
ghci> ['K'..'Z']   
"KLMNOPQRSTUVWXYZ"
ghci> take 10 (cycle [1,2,3]) 
[1,2,3,1,2,3,1,2,3,1] 
ghci> take 12 (cycle "LOL ") 
"LOL LOL LOL "

ghci> take 10 (repeat 5) 
[5,5,5,5,5,5,5,5,5,5]

length' xs = sum [1 | _ <- xs]

removeNonUppercase st = [ c | c <- st, c `elem` ['A'..'Z']]
ghci> removeNonUppercase "Hahaha! Ahahaha!" 
"HA" 
ghci> removeNonUppercase "IdontLIKEFROGS" 
"ILIKEFROGS"

ghci> let xxs = [[1,3,5,2,3,1,2,4,5],[1,2,3,4,5,6,7,8,9],[1,2,4,2,1,6,3,1,3,2,3,6]] 
ghci> [ [ x | x <- xs, even x ] | xs <- xxs] 
[[2,2,4],[2,4,6,8],[2,4,2,6,2,6]]

ghci> zip [1,2,3,4,5] [5,5,5,5,5] 
[(1,5),(2,5),(3,5),(4,5),(5,5)] 
ghci> zip [1 .. 5] ["one", "two", "three", "four", "five"] 
[(1,"one"),(2,"two"),(3,"three"),(4,"four"),(5,"five")]

ghci> zip [5,3,2,6,2,7,2,5,4,6,6] ["im","a","turtle"] 
[(5,"im"),(3,"a"),(2,"turtle")]

ghci> zip [1..] ["apple", "orange", "cherry", "mango"] 
[(1,"apple"),(2,"orange"),(3,"cherry"),(4,"mango")]

ghci> let triangles = [ (a,b,c) | c <- [1..10], b <- [1..10], a <- [1..10] ]

ghci> let rightTriangles = [ (a,b,c) | c <- [1..10], b <- [1..c], a <- [1..b], a^2 + b^2 == c^2]

ghci> let rightTriangles' = [ (a,b,c) | c <- [1..10], b <- [1..c], a <- [1..b], a^2 + b^2 == c^2, a+b+c == 24] 
ghci> rightTriangles' 
[(6,8,10)]
